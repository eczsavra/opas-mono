import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { phone, recipientName, pharmacyGln } = body

    // Basit validasyon
    if (!phone || !recipientName) {
      return NextResponse.json(
        { ok: false, error: 'Telefon numarasÄ± ve alÄ±cÄ± adÄ± gerekli' },
        { status: 400 }
      )
    }

    // TÃ¼rkiye telefon numarasÄ± format kontrolÃ¼
    const phoneRegex = /^(\+90|0)?(5[0-9]{2})[- ]?([0-9]{3})[- ]?([0-9]{2})[- ]?([0-9]{2})$/
    const cleanPhone = phone.replace(/[\s\-\+]/g, '').replace(/^90/, '').replace(/^0/, '')
    
    if (!phoneRegex.test(phone) && !/^5[0-9]{9}$/.test(cleanPhone)) {
      return NextResponse.json(
        { ok: false, error: 'GeÃ§ersiz telefon numarasÄ± formatÄ± (5XX XXX XX XX)' },
        { status: 400 }
      )
    }

    // Test iÃ§in sabit SMS kodu
    const testSmsCode = '789456'

    // SimÃ¼lasyon: SMS gÃ¶nderme iÅŸlemi
    console.log('ğŸ“± SMS doÄŸrulama kodu gÃ¶nderiliyor:', {
      to: phone,
      recipientName,
      pharmacyGln,
      code: testSmsCode,
      timestamp: new Date().toISOString()
    })

    // BaÅŸarÄ±lÄ± response
    return NextResponse.json({
      ok: true,
      message: 'SMS doÄŸrulama kodu baÅŸarÄ±yla gÃ¶nderildi',
      phone,
      expiresIn: '3 dakika',
      expiresInSeconds: 180,
      testNote: 'Test iÃ§in SMS doÄŸrulama kodu: 789456'
    })

  } catch (error) {
    console.error('SMS send error:', error)
    return NextResponse.json(
      { ok: false, error: 'SMS gÃ¶nderim hatasÄ±' },
      { status: 500 }
    )
  }
}
